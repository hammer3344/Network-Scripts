#IOS XE/IOS CHECKLIST APR-2024
#AUTHOR: STEPHAN MARTIN; stephan.martin.1.ctr@us.af.mil
#LAST MODIFIED: 1 May 2024

############################################################
#
# CHANGE LOG:
#
# Change: 1 May 2024
#
#       1.) Updated script to 2Q24 checklists.
#	2.) Corrected V-220650/V-220624. Missing rule check/report for V-220624
#
# Change: 1 November 2023
#
#	1.) Added checklist identifier for report writer in preparation of RTR/L3 SW ammendments. 
#
# Change: 31 October 2023
#
#	1.) Updated checklist for 4Q23.
#
# Change: 28 September 2023
#
#	1.) Updated entries for 220552, 220553, 220555, 220556, 220569 (pulled into STIG report)
#	2.) Updated reference call-backs
#	3.) Updated instructions to reflect changes
#
# Change: 29 September 2023
#
#       1.) Updated script to account for "else" syntax error
#       2.) Corrected callback for 00050
#       3.) Added explicit path for $env:userprofile. you MUST set the variable on line 71 to your profile path (to account for onedrive desktops
#       4.) Updated instructions
#       5.) Updated V-220568 - removed old rules/updated variables to point appropriately
#
# Required files for this script to work
#
#         The following files are required to ensure that this script works properly
#
#         1.) Output: show version
#         2.) Template: IOS XE checklist template (with XML comments)
#         2.) Template: IOS checklist template (with XML comments)
#         4.) Script: TCL Script to gather version, snmp user, and show run all and map to desired file path.
#
# Instructions for setting up file structure for the script
#
#         1.) Create folder on desktop named STIG-FILES
#         2.) Create the following folders within STIG-FILES: STIG-OUTPUT, STIG-CONFIG, STIG-VERSION, STIG-OPEN
#         3.) Export solarwinds report to your desktop. The filename MUST be ComplianceReport.csv
#         4.) Save the STIG Templates to your desktop. The names must be 3Q23-L2-XE-TEMPLATE.txt and 3Q23-L2-IOS-TEMPLATE.txt
#         5.) Run the TCL script through solarwinds to all target nodes. Make sure your IP is put into the script and TFTP is turned on.
#         6.) Sort all files into the appropriate folders (Ver in STIG-VER, Configs into STIG-CONFIG, etc.)
#         7.) Set variable path to your C:\Users\EDI number
#         8.) Once all files are created and in place- run this script in Powershell ISE. It is best that you change the directory to your Desktop before proceeding but it is not necessary.
#
#
# NOTE!
# Ensure that you properly format the CSV output (the report is exported in an unusable format- all rule names must be on the first row and Node # ID must have the space removed
# failure to format the CSV properly will result in checklists being generated with "all open" states. 
# Version tracking
#
#      Version format: MAJOR.YEAR.MONTH.DATE
#      Version: 6.24.5.1
#                | Date |
#
###########################################################

#GENERATE ALL CKL FILE TEMPLATES
#UPDATE ENV:PROFILE PATH TO YOUR ACCOUNT (Required if using O365 with OneDrive
#Import individual Config files --> Grab hostname from configuration file --> Trim excess output --> 
$env:userprofile = "C:\Users\1286772710E\"

Get-Childitem -Path "$env:userprofile\Desktop\STIG-FILES\STIG-CONFIG" -recurse | ForEach-Object {
    $hostname_import = select-string $_.Fullname -Pattern 'hostname N15-.+'
    $hostname = $hostname_import -replace '.+ ',''
    $checklist_named = $env:userprofile + '\Desktop\STIG-FILES\STIG-OUTPUT\' + $hostname + '.ckl'
    $CKL_Status = 'Checklist for ' + $hostname + ' generated successfully - Reference number: 00001'

#DEFINE IOS-XE or IOS CHECKLIST

    $check_ver = $env:userprofile + '\Desktop\STIG-FILES\STIG-VERSION\' + 'VER-' + $hostname + '.txt'
    $IOS_XE = 'IOS-XE'
    $XE_DETECT = $hostname + ' identified as an XE device.'
    $IOS_DETECT = $hostname + ' identified as an IOS device.'

#UPDATE CHECKLIST TEMPLATE NAME HERE
    if  ((Get-Content $check_ver -Raw) -match $IOS_XE) {
    cp $env:userprofile\Desktop\2Q24-L2-XE-TEMPLATE.txt $env:userprofile\Desktop\STIG-FILES\STIG-OUTPUT\$hostname.ckl
    $version = "XE"
    write-host ($XE_DETECT)
    write-host ($CKL_Status)
    } else {
    cp $env:userprofile\Desktop\2Q24-L2-IOS-TEMPLATE.txt $env:userprofile\Desktop\STIG-FILES\STIG-OUTPUT\$hostname.ckl
    write-host ($IOS_DETECT)
    write-host($CKL_Status)
    $version = "IOS"
    }

     $old = '<HOST_NAME></HOST_NAME>'
     $new = '<HOST_NAME>' + $hostname + '</HOST_NAME>'
     $CKL_Host = 'CKL Name for ' + $hostname + ' updated.'
     $version = $version_chk

#MODIFY HOSTNAME IN CKL

     (Get-Content $checklist_named) -replace $old,$new |
        Set-content $checklist_named

    write-host($CKL_Host)


#GET DEVICE IP ADDRESS
#SET THIS PATTERN MATCH TO YOUR MANAGEMENT IP SCOPE, removes the additional comments before (checklist_ip_pre) and then removes the subnet mask (checklist_ip_post)
    
    $checklist_ip_input = select-string $_.Fullname -Pattern 'ip address 143\.144\.2[14][12-35]\.([0-9]{1,3})'
    $checklist_ip_pre = $checklist_ip_input -replace '.+address ',''
    $checklist_ip_post = $checklist_ip_pre -replace ' 255\.255\.([0-9]{1,3})\.([0-9]{1,3})'


    $old_ip = '<HOST_IP></HOST_IP>'
    $new_ip = '<HOST_IP>' + $checklist_ip_post + '</HOST_IP>'
    $CKL_IP = 'IP Address for ' + $hostname + ' updated succesfully. Reference number: 00002'

#MODIFY IP ADDRESS IN CKL

     (Get-Content $checklist_named) -replace $old_ip,$new_ip |
        Set-content $checklist_named

        write-host($CKL_IP)
        
        
#REPORT PATH
    $report = $env:userprofile + "Desktop\ComplianceReport.csv"     
      
#STIG CHECKLIST COMPILE
#Modify import-csv file path as needed (best to use replace all for the current string)

###################   DUPLICATE RULE ##################        
#V-220648: XE - Services
#V-220622: IOS - Services

#
#        $Pattern_220648 = $hostname + '.+CISCO-L2-V-220648=Passed'
#        $V220648_Complete = $hostname + ' Services check complete. Reference number: 00002'
#        $V220648_Open = '<!--220648--><STATUS>Open</STATUS>'
#        $V220648_NAF = '<!--220648--><STATUS>NotAFinding</STATUS>'
#        $V220622_Open = '<!--220622--><STATUS>Open</STATUS>'
#        $V220622_NAF = '<!--220622--><STATUS>NotAFinding</STATUS>'


    
#    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220648' | select-string -Pattern $Pattern_220648 -Quiet) {
#        (Get-Content $checklist_named) -replace $V220648_Open,$V220648_NAF |
#        Set-content $checklist_named

#        (Get-Content $checklist_named) -replace $V220622_Open,$V220622_NAF |
#        Set-content $checklist_named

#        write-host($V220648_Complete)
#        }

#   else {
#       $logData = @(
#       [pscustomobject]@{
#           Name = $hostname
#           RuleID = "V-220648"
#           Status = "Open"
#           CAT = "Cat II"
#           Description = 'The Cisco switch must be configured to disable non-essential capabilities'
#                       }
#                   )
#           $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

#       write-host($V220648_Complete)
#       }

#V-220649: XE - 802.1X Authentication 
#V-220623: IOS - 802.1X Authentication


        $Pattern_220649 = $hostname + '.+CISCO-L2-V-220649=Passed'
        $V220649_Complete = $hostname + ' 802.1X check complete. Reference number: 00003'
        $V220649_Open = '<!--220649--><STATUS>Open</STATUS>'
        $V220623_Open = '<!--220623--><STATUS>Open</STATUS>'
        $V220649_NAF = '<!--220649--><STATUS>NotAFinding</STATUS>'
        $V220623_NAF = '<!--220623--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220649' | select-string -Pattern $Pattern_220649 -Quiet) {
        (Get-Content $checklist_named) -replace $V220649_Open,$V220649_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220623_Open,$V220623_NAF |
        Set-content $checklist_named

        write-host($V220649_Complete)
        } else { 
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
        $logData = @(
        [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000020"
            RuleID = "V-220649"
            Status = "Open"
            CAT = "Cat I"
            Description = '802.1X: The Cisco switch must uniquely identify all network-connected endpoint devices before establishing any connection.'
                            }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

        write-host($V220649_Complete)
        } else {
        $logData = @(
        [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000020"
            RuleID = "V-220623"
            Status = "Open"
            CAT = "Cat I"
            Description = '802.1X: The Cisco switch must uniquely identify all network-connected endpoint devices before establishing any connection.'
                            }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

        write-host($V220649_Complete)
            }
        }
        

#V-220651-1: XE - Port QoS Policy
#V-220625-1: IOS - Port QoS Policy


        $Pattern_220651_1 = $hostname + '.+CISCO-L2-V-220651-1=Passed'
        $Pattern_220651_2 = $hostname + '.+CISCO-L2-V-220651-2=Passed'
        $V220651_Complete = $hostname + ' QoS Policy check complete. Reference number: 00004'
        $V220651_Open = '<!--220651--><STATUS>Open</STATUS>'
        $V220625_Open = '<!--220625--><STATUS>Open</STATUS>'
        $V220651_NAF = '<!--220651--><STATUS>NotAFinding</STATUS>'
        $V220625_NAF = '<!--220625--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220651-1' | select-string -Pattern $Pattern_220651_1 -Quiet) {
        (Get-Content $checklist_named) -replace $V220651_Open,$V220651_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220625_Open,$V220625_NAF |
        Set-content $checklist_named

        write-host($V220651_Complete)
        }

        elseif (import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220651-2' | select-string -Pattern $Pattern_220651_2 -Quiet) {
        (Get-Content $checklist_named) -replace $V220651_Open,$V220651_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220625_Open,$V220625_NAF |
        Set-content $checklist_named

        write-host($V220651_Complete)
        } 
        elseif 
        (if ((Get-Content $check_ver -Raw) -match $IOS_XE)) {
        $logData = @(
        [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000040"
            RuleID = "V-220651"
            Status = "Open"
            CAT = "Cat II"
            Description = 'QOS: The Cisco switch must manage excess bandwidth to limit the effects of packet flooding types of denial of service (DoS) attacks.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

        write-host($V220651_Complete)
        } 
          
          else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000040"
            RuleID = "V-220625"
            Status = "Open"
            CAT = "Cat II"
            Description = 'QOS: The Cisco switch must manage excess bandwidth to limit the effects of packet flooding types of denial of service (DoS) attacks.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

        write-host($V220651_Complete)
                 }
              
        

#V-220652 and V-220653 XE - not listed: Current generation Catalyst product lines (3650-C, 3850, 9300, 4500, 6500 series catalyst switches support SPAN) - Checklist template defaulted to not a finding


#V-220655: XE - STP Guard Root
#V-220529: IOS - STP Guard Root


        $Pattern_220655 = $hostname + '.+CISCO-L2-V-220655=Passed'
        $V220655_Complete = $hostname + ' Root Guard check complete. Reference number: 00005'
        $V220655_Open = '<!--220655--><STATUS>Open</STATUS>'
        $V220629_Open = '<!--220629--><STATUS>Open</STATUS>'
        $V220655_NAF = '<!--220655--><STATUS>NotAFinding</STATUS>'
        $V220629_NAF = '<!--220629--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220655' | select-string -Pattern $Pattern_220655 -Quiet) {
        (Get-Content $checklist_named) -replace $V220655_Open,$V220655_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220629_Open,$V220629_NAF |
        Set-content $checklist_named

        write-host($V220655_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
        $logData = @(
        [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000090"
            RuleID = "V-220655"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Root Guard enabled on all switch ports connecting to access layer switches.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220655_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000090"
            RuleID = "V-220629"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Root Guard enabled on all switch ports connecting to access layer switches.'
                            }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220655_Complete)
                }
             }
        


#V-220656: XE - STP BPDU Guard
#V-220630: IOS - STP BPDU Guard


        $Pattern_220656 = $hostname + '.+CISCO-L2-V-220656=Passed'
        $V220656_Complete = $hostname + ' BPDU guard check complete. Reference number: 00006'
        $V220656_Open = '<!--220656--><STATUS>Open</STATUS>'
        $V220630_Open = '<!--220630--><STATUS>Open</STATUS>'
        $V220656_NAF = '<!--220656--><STATUS>NotAFinding</STATUS>'
        $V220630_NAF = '<!--220630--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220656' | select-string -Pattern $Pattern_220656 -Quiet) {
        (Get-Content $checklist_named) -replace $V220656_Open,$V220656_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220630_Open,$V220630_NAF |
        Set-content $checklist_named

        write-host($V220656_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000100"
            RuleID = "V-220656"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have BPDU Guard enabled on all user-facing or untrusted access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220656_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000100"
            RuleID = "V-220630"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have BPDU Guard enabled on all user-facing or untrusted access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220656_Complete)
            }
        }


#V-220657: XE - STP Loopguard Default
#V-220631: IOS - STP Loopguard Default


        $Pattern_220657 = $hostname + '.+CISCO-L2-V-220657=Passed'
        $V220657_Complete = $hostname + ' Loopguard check complete. Reference number: 00007'
        $V220657_Open = '<!--220657--><STATUS>Open</STATUS>'
        $V220631_Open = '<!--220631--><STATUS>Open</STATUS>'
        $V220657_NAF = '<!--220657--><STATUS>NotAFinding</STATUS>'
        $V220631_NAF = '<!--220657--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220657' | select-string -Pattern $Pattern_220657 -Quiet) {
        (Get-Content $checklist_named) -replace $V220657_Open,$V220657_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220631_Open,$V220631_NAF |
        Set-content $checklist_named

        write-host($V220657_Complete)
        } else {
        if ($version = "XE"){
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000110"
            RuleID = "V-220657"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have STP Loop Guard enabled.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220657_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000110"
            RuleID = "V-220631"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have STP Loop Guard enabled.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220657_Complete)
            }
        }

#V-220658: XE - Block Unicast
#V-220632: IOS - Block Unicast


        $Pattern_220658 = $hostname + '.+CISCO-L2-V-220658=Passed'
        $V220658_Complete = $hostname + ' Block Unicast check complete. Reference number: 00008'
        $V220658_Open = '<!--220658--><STATUS>Open</STATUS>'
        $V220632_Open = '<!--220632--><STATUS>Open</STATUS>'
        $V220658_NAF = '<!--220658--><STATUS>NotAFinding</STATUS>'
        $V220632_NAF = '<!--220632--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220658' | select-string -Pattern $Pattern_220658 -Quiet) {
        (Get-Content $checklist_named) -replace $V220658_Open,$V220658_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220632_Open,$V220632_NAF |
        Set-content $checklist_named

        write-host($V220658_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000120"
            RuleID = "V-220658"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Unknown Unicast Flood Blocking (UUFB) enabled.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220658_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000120"
            RuleID = "V-220632"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Unknown Unicast Flood Blocking (UUFB) enabled.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220658_Complete)
            }
        }

#V-220659: XE - DHCP Snooping
#V-220633: IOS - DHCP Snooping               


        $Pattern_220659 = $hostname + '.+CISCO-L2-V-220659=Passed'
        $V220659_Complete = $hostname + ' DHCP Snooping check complete. Reference number: 00009'
        $V220659_Open = '<!--220659--><STATUS>Open</STATUS>'
        $V220633_Open = '<!--220633--><STATUS>Open</STATUS>'
        $V220659_NAF = '<!--220659--><STATUS>NotAFinding</STATUS>'
        $V220633_NAF = '<!--220633--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220659' | select-string -Pattern $Pattern_220659 -Quiet) {
        (Get-Content $checklist_named) -replace $V220659_Open,$V220659_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220633_Open,$V220633_NAF |
        Set-content $checklist_named

        write-host($V220659_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000130"
            RuleID = "V-220659"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have DHCP snooping for all user VLANs to validate DHCP messages from untrusted sources.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220659_Complete)
            } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000130"
            RuleID = "V-220633"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have DHCP snooping for all user VLANs to validate DHCP messages from untrusted sources.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220659_Complete)
                 }
            }



#V-220660: XE - IP Source Guard  
#V-220634: IOS - IP Source Guard         


        $Pattern_220660 = $hostname + '.+CISCO-L2-V-220660=Passed'
        $V220660_Complete = $hostname + ' IP Source Guard check complete. Reference number: 00010'
        $V220660_Open = '<!--220660--><STATUS>Open</STATUS>'
        $V220634_Open = '<!--220634--><STATUS>Open</STATUS>'
        $V220660_NAF = '<!--220660--><STATUS>NotAFinding</STATUS>'
        $V220634_NAF = '<!--220634--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220660' | select-string -Pattern $Pattern_220660 -Quiet) {
        (Get-Content $checklist_named) -replace $V220660_Open,$V220660_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220634_Open,$V220634_NAF |
        Set-content $checklist_named

        write-host($V220660_Complete)
        } else {
         if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000140"
            RuleID = "V-220660"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have IP Source Guard enabled on all user-facing or untrusted access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220660_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000140"
            RuleID = "V-220634"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have IP Source Guard enabled on all user-facing or untrusted access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220660_Complete)
             }
        }



#V-220661: XE - Dynamic ARP Inspection
#V-220635: IOS - Dynamic ARP Inspection 


        $Pattern_220661 = $hostname + '.+CISCO-L2-V-220661=Passed'
        $V220661_Complete = $hostname + ' DAI check complete. Reference number: 00011'
        $V220661_Open = '<!--220661--><STATUS>Open</STATUS>'
        $V220635_Open = '<!--220635--><STATUS>Open</STATUS>'
        $V220661_NAF = '<!--220661--><STATUS>NotAFinding</STATUS>'
        $V220635_NAF = '<!--220635--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220661' | select-string -Pattern $Pattern_220661 -Quiet) {
        (Get-Content $checklist_named) -replace $V220661_Open,$V220661_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220635_Open,$V220635_NAF |
        Set-content $checklist_named

        write-host($V220661_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000150"
            RuleID = "V-220661"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Dynamic Address Resolution Protocol (ARP) Inspection (DAI) enabled on all user VLANs.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220661_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000150"
            RuleID = "V-220635"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have Dynamic Address Resolution Protocol (ARP) Inspection (DAI) enabled on all user VLANs.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220661_Complete)
               }
            }



#V-220662: XE - Storm-control
#V-220636: IOS - Storm-control


        $Pattern_220662 = $hostname + '.+CISCO-L2-V-220662=Passed'
        $V220662_Complete = $hostname + ' Storm-control check complete. Reference number: 00012'
        $V220662_Open = '<!--220662--><STATUS>Open</STATUS>'
        $V220636_Open = '<!--220636--><STATUS>Open</STATUS>'
        $V220662_NAF = '<!--220662--><STATUS>NotAFinding</STATUS>'
        $V220636_NAF = '<!--220636--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220662' | select-string -Pattern $Pattern_220662 -Quiet) {
        (Get-Content $checklist_named) -replace $V220662_Open,$V220662_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220636_Open,$V220636_NAF |
        Set-content $checklist_named

        write-host($V220662_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000160"
            RuleID = "V-220662"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must have Storm Control configured on all host-facing switchports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220662_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000160"
            RuleID = "V-220636"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must have Storm Control configured on all host-facing switchports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220662_Complete)
             }
        }


#V-220663: XE - IGMP Snooping
#V-220637: IOS - IGMP Snooping


        $Pattern_220663 = $hostname + '.+CISCO-L2-V-220663=Passed'
        $V220663_Complete = $hostname + ' IGMP Snooping check complete. Reference number: 00013'
        $V220663_Open = '<!--220663--><STATUS>Open</STATUS>'
        $V220637_Open = '<!--220637--><STATUS>Open</STATUS>'
        $V220663_NAF = '<!--220663--><STATUS>NotAFinding</STATUS>'
        $V220637_NAF = '<!--220637--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220663' | select-string -Pattern $Pattern_220663 -Quiet) {
        (Get-Content $checklist_named) -replace $V220663_Open,$V220663_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220637_Open,$V220637_NAF |
        Set-content $checklist_named

        write-host($V220663_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000170"
            RuleID = "V-220663"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must have IGMP or MLD Snooping configured on all VLANs.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220663_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000170"
            RuleID = "V-220637"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must have IGMP or MLD Snooping configured on all VLANs.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220663_Complete)
            }
        }

#V-220664: XE - Rapid-PVST
#V-220638: IOS - Rapid-PVST


        $Pattern_220664 = $hostname + '.+CISCO-L2-V-220664=Passed'
        $V220664_Complete = $hostname + ' Rapid-PVST check complete. Reference number: 00014'
        $V220664_Open = '<!--220664--><STATUS>Open</STATUS>'
        $V220638_Open = '<!--220638--><STATUS>Open</STATUS>'
        $V220664_NAF = '<!--220664--><STATUS>NotAFinding</STATUS>'
        $V220638_NAF = '<!--220638--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220664' | select-string -Pattern $Pattern_220664 -Quiet) {
        (Get-Content $checklist_named) -replace $V220664_Open,$V220664_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220638_Open,$V220638_NAF |
        Set-content $checklist_named

        write-host($V220664_Complete)
        } else {
        if($version = "XE"){
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000180"
            RuleID = "V-220664"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must implement Rapid STP where VLANs span multiple switches with redundant links.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220664_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000180"
            RuleID = "V-220638"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must implement Rapid STP where VLANs span multiple switches with redundant links.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220664_Complete)
            }
        }


#V-220665: XE - UDLD Global 
#V-220639: IOS - UDLD Global  


        $Pattern_220665 = $hostname + '.+CISCO-L2-V-220665=Passed'
        $V220665_Complete = $hostname + ' UDLD check complete. Reference number: 00015'
        $V220665_Open = '<!--220665--><STATUS>Open</STATUS>'
        $V220639_Open = '<!--220639--><STATUS>Open</STATUS>'
        $V220665_NAF = '<!--220665--><STATUS>NotAFinding</STATUS>'
        $V220639_NAF = '<!--220639--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220665' | select-string -Pattern $Pattern_220665 -Quiet) {
        (Get-Content $checklist_named) -replace $V220665_Open,$V220665_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220639_Open,$V220639_NAF |
        Set-content $checklist_named

        write-host($V220665_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000190"
            RuleID = "V-220665"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must enable Unidirectional Link Detection (UDLD) to protect against one-way connections.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220665_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000190"
            RuleID = "V-220639"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must enable Unidirectional Link Detection (UDLD) to protect against one-way connections.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220665_Complete)
            }
        }


#V-220666: XE - Trunk Nonegotiate
#V-220640: IOS - Trunk Nonegotiate


        $Pattern_220666 = $hostname + '.+CISCO-L2-V-220666=Passed'
        $V220666_Complete = $hostname + ' Trunk Nonegotiate check complete. Reference number: 00016'
        $V220666_Open = '<!--220666--><STATUS>Open</STATUS>'
        $V220640_Open = '<!--220640--><STATUS>Open</STATUS>'
        $V220666_NAF = '<!--220666--><STATUS>NotAFinding</STATUS>'
        $V220640_NAF = '<!--220640--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220666' | select-string -Pattern $Pattern_220666 -Quiet) {
        (Get-Content $checklist_named) -replace $V220666_Open,$V220666_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220640_Open,$V220640_NAF |
        Set-content $checklist_named

        write-host($V220666_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000200"
            RuleID = "V-220666"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all trunk links enabled statically.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220666_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000200"
            RuleID = "V-220640"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all trunk links enabled statically.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220666_Complete)
            }
        }


#V-220667: XE - Disabled Port Configuration   
#V-220641: IOS - Disabled Port Configuration


        $Pattern_220667 = $hostname + '.+CISCO-L2-V-220667=Passed'
        $V220667_Complete = $hostname + ' Disabled Port check complete. Reference number: 00017'
        $V220667_Open = '<!--220667--><STATUS>Open</STATUS>'
        $V220641_Open = '<!--220641--><STATUS>Open</STATUS>'
        $V220667_NAF = '<!--220667--><STATUS>NotAFinding</STATUS>'
        $V220641_NAF = '<!--220641--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220667' | select-string -Pattern $Pattern_220667 -Quiet) {
        (Get-Content $checklist_named) -replace $V220667_Open,$V220667_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220641_Open,$V220641_NAF |
        Set-content $checklist_named

        write-host($V220667_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000210"
            RuleID = "V-220667"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all disabled switch ports assigned to an unused VLAN.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220667_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000210"
            RuleID = "V-220641"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all disabled switch ports assigned to an unused VLAN.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220667_Complete)
             }
            }



#V-220668: XE - VLAN 1 assigned to port
#V-220642: IOS - VLAN 1 assigned to port


        $Pattern_220668 = $hostname + '.+CISCO-L2-V-220668=Passed'
        $V220668_Complete = $hostname + ' VLAN 1 Assignment check complete. Reference number: 00018'
        $V220668_Open = '<!--220668--><STATUS>Open</STATUS>'
        $V220642_Open = '<!--220642--><STATUS>Open</STATUS>'
        $V220668_NAF = '<!--220668--><STATUS>NotAFinding</STATUS>'
        $V220642_NAF = '<!--220642--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220668' | select-string -Pattern $Pattern_220668 -Quiet) {
        (Get-Content $checklist_named) -replace $V220668_Open,$V220668_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220642_Open,$V220642_NAF |
        Set-content $checklist_named

        write-host($V220668_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000220"
            RuleID = "V-220668"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must not have the default VLAN assigned to any host-facing switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220668_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000220"
            RuleID = "V-220642"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must not have the default VLAN assigned to any host-facing switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220668_Complete)
            }
        }

#V-220669: XE - Trunk Remove VLAN 1
#V-220643: IOS - Trunk Remove VLAN 1


        $Pattern_220669 = $hostname + '.+CISCO-L2-V-220669=Passed'
        $V220669_Complete = $hostname + ' VLAN 1 Trunk check complete. Reference number: 00019'
        $V220669_Open = '<!--220669--><STATUS>Open</STATUS>'
        $V220643_Open = '<!--220643--><STATUS>Open</STATUS>'
        $V220669_NAF = '<!--220669--><STATUS>NotAFinding</STATUS>'
        $V220643_NAF = '<!--220643--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220669' | select-string -Pattern $Pattern_220669 -Quiet) {
        (Get-Content $checklist_named) -replace $V220669_Open,$V220669_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220643_Open,$V220643_NAF |
        Set-content $checklist_named

        write-host($V220669_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000230"
            RuleID = "V-220669"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have the default VLAN pruned from all trunk ports that do not require it.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220669_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000230"
            RuleID = "V-220643"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have the default VLAN pruned from all trunk ports that do not require it.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220669_Complete)
            }
        }

#V-220670: XE - VLAN 1 No IP Address and shutdown
#V-220644: IOS - VLAN 1 No IP Address and shutdown


        $Pattern_220670 = $hostname + '.+CISCO-L2-V-220670=Passed'
        $V220670_Complete = $hostname + ' VLAN 1 IP Address check complete. Reference number: 00020'
        $V220670_Open = '<!--220670--><STATUS>Open</STATUS>'
        $V220644_Open = '<!--220644--><STATUS>Open</STATUS>'
        $V220670_NAF = '<!--220670--><STATUS>NotAFinding</STATUS>'
        $V220644_NAF = '<!--220644--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220670' | select-string -Pattern $Pattern_220670 -Quiet) {
        (Get-Content $checklist_named) -replace $V220670_Open,$V220670_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220644_Open,$V220644_NAF |
        Set-content $checklist_named

        write-host($V220670_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000240"
            RuleID = "V-220670"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must not use the default VLAN for management traffic.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220670_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000240"
            RuleID = "V-220644"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must not use the default VLAN for management traffic.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220670_Complete)
            }
        }


#V-220671: XE - Unused user ports
#V-220645: IOS - Unused user ports


        $Pattern_220671 = $hostname + '.+CISCO-L2-V-220671=Passed'
        $V220671_Complete = $hostname + ' Unused Port check complete. Reference number: 00021'
        $V220671_Open = '<!--220671--><STATUS>Open</STATUS>'
        $V220645_Open = '<!--220645--><STATUS>Open</STATUS>'
        $V220671_NAF = '<!--220671--><STATUS>NotAFinding</STATUS>'
        $V220645_NAF = '<!--220645--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220671' | select-string -Pattern $Pattern_220671 -Quiet) {
        (Get-Content $checklist_named) -replace $V220671_Open,$V220671_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220645_Open,$V220645_NAF |
        Set-content $checklist_named

        write-host($V220671_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000250"
            RuleID = "V-220671"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all user-facing or untrusted ports configured as access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220671_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000250"
            RuleID = "V-220645"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have all user-facing or untrusted ports configured as access switch ports.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220671_Complete)
             }
        }


#V-220672: XE - Native Vlan
#V-220646: IOS - Native VLAN


        $Pattern_220672 = $hostname + '.+CISCO-L2-V-220672=Passed'
        $V220672_Complete = $hostname + ' Native VLAN check complete. Reference number: 00022'
        $V220672_Open = '<!--220672--><STATUS>Open</STATUS>'
        $V220646_Open = '<!--220646--><STATUS>Open</STATUS>'
        $V220672_NAF = '<!--220672--><STATUS>NotAFinding</STATUS>'
        $V220646_NAF = '<!--220646--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220672' | select-string -Pattern $Pattern_220672 -Quiet) {
        (Get-Content $checklist_named) -replace $V220672_Open,$V220672_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220646_Open,$V220646_NAF |
        Set-content $checklist_named

        write-host($V220672_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000260"
            RuleID = "V-220672"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have the native VLAN assigned to an ID other than the default VLAN for all 802.1q trunk links.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220672_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000260"
            RuleID = "V-220646"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must have the native VLAN assigned to an ID other than the default VLAN for all 802.1q trunk links.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220672_Complete)
            }
        }


#V-220673: XE - Access port on Native VLAN
#V-220647: IOS - Access port on Native VLAN


        $Pattern_220673 = $hostname + '.+CISCO-L2-V-220673=Passed'
        $V220673_Complete = $hostname + ' Access port check complete. Reference number: 00023'
        $V220673_Open = '<!--220673--><STATUS>Open</STATUS>'
        $V220647_Open = '<!--220647--><STATUS>Open</STATUS>'
        $V220673_NAF = '<!--220673--><STATUS>NotAFinding</STATUS>'
        $V220647_NAF = '<!--220647--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220673' | select-string -Pattern $Pattern_220673 -Quiet) {
        (Get-Content $checklist_named) -replace $V220673_Open,$V220673_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220647_Open,$V220647_NAF |
        Set-content $checklist_named

        write-host($V220673_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000270"
            RuleID = "V-220673"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must not have any switchports assigned to the native VLAN.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220673_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000270"
            RuleID = "V-220647"
            Status = "Open"
            CAT = "Cat III"
            Description = 'The Cisco switch must not have any switchports assigned to the native VLAN.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220673_Complete)
            }
        }


#V-220518: XE - VTY Session Limiting
#V-220570: IOS - VTY Session Limiting


        $Pattern_220518 = $hostname + '.+CISCO-L2-V-220518=Passed'
        $V220518_Complete = $hostname + ' Access port check complete. Reference number: 00024'
        $V220518_Open = '<!--220518--><STATUS>Open</STATUS>'
        $V220570_Open = '<!--220570--><STATUS>Open</STATUS>'
        $V220518_NAF = '<!--220518--><STATUS>NotAFinding</STATUS>'
        $V220570_NAF = '<!--220570--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220518' | select-string -Pattern $Pattern_220518 -Quiet) {
        (Get-Content $checklist_named) -replace $V220518_Open,$V220518_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220570_Open,$V220570_NAF |
        Set-content $checklist_named

        write-host($V220518_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000010"
            RuleID = "V-220518"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to limit the number of concurrent management sessions to an organization-defined number.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220518_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000010"
            RuleID = "V-220570"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to limit the number of concurrent management sessions to an organization-defined number.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220518_Complete)
            }
        }

#V-220519: XE - Archive Logging (Includes 220519, 220520, 220521, 220522, 220526, 220530, 220545, 220559, 220561)
#V-220571: IOS - Archive Logging (Includes 220571, 220572, 220573, 220574, 220578, 220582, 220611, 220613)


        $Pattern_Archive = $hostname + '.+ARCHIVE-LOG=Passed'
        $V220519_Complete = $hostname + ' Archive Logging check complete. Reference number: 00025'
        $V220519_Open = '<!--220519--><STATUS>Open</STATUS>'
        $V220520_Open = '<!--220520--><STATUS>Open</STATUS>'
        $V220521_Open = '<!--220521--><STATUS>Open</STATUS>'
        $V220522_Open = '<!--220522--><STATUS>Open</STATUS>'
        $V220526_Open = '<!--220526--><STATUS>Open</STATUS>'
        $V220530_Open = '<!--220530--><STATUS>Open</STATUS>'
        $V220545_Open = '<!--220545--><STATUS>Open</STATUS>'
        $V220559_Open = '<!--220559--><STATUS>Open</STATUS>'
        $V220561_Open = '<!--220561--><STATUS>Open</STATUS>'
        $V220571_Open = '<!--220571--><STATUS>Open</STATUS>'
        $V220572_Open = '<!--220572--><STATUS>Open</STATUS>'
        $V220573_Open = '<!--220573--><STATUS>Open</STATUS>'
        $V220574_Open = '<!--220574--><STATUS>Open</STATUS>'
        $V220578_Open = '<!--220578--><STATUS>Open</STATUS>'
        $V220582_Open = '<!--220582--><STATUS>Open</STATUS>'
        $V220597_Open = '<!--220597--><STATUS>Open</STATUS>'
        $V220611_Open = '<!--220611--><STATUS>Open</STATUS>'
        $V220613_Open = '<!--220613--><STATUS>Open</STATUS>'
        $V220519_NAF = '<!--220519--><STATUS>NotAFinding</STATUS>'
        $V220520_NAF = '<!--220520--><STATUS>NotAFinding</STATUS>'
        $V220521_NAF = '<!--220521--><STATUS>NotAFinding</STATUS>'
        $V220522_NAF = '<!--220522--><STATUS>NotAFinding</STATUS>'
        $V220526_NAF = '<!--220526--><STATUS>NotAFinding</STATUS>'
        $V220530_NAF = '<!--220530--><STATUS>NotAFinding</STATUS>'
        $V220545_NAF = '<!--220545--><STATUS>NotAFinding</STATUS>'
        $V220559_NAF = '<!--220559--><STATUS>NotAFinding</STATUS>'
        $V220561_NAF = '<!--220561--><STATUS>NotAFinding</STATUS>'
        $V220571_NAF = '<!--220571--><STATUS>NotAFinding</STATUS>'
        $V220572_NAF = '<!--220572--><STATUS>NotAFinding</STATUS>'
        $V220573_NAF = '<!--220573--><STATUS>NotAFinding</STATUS>'
        $V220574_NAF = '<!--220574--><STATUS>NotAFinding</STATUS>'
        $V220578_NAF = '<!--220578--><STATUS>NotAFinding</STATUS>'
        $V220582_NAF = '<!--220582--><STATUS>NotAFinding</STATUS>'
        $V220597_NAF = '<!--220597--><STATUS>NotAFinding</STATUS>'
        $V220611_NAF = '<!--220611--><STATUS>NotAFinding</STATUS>'
        $V220613_NAF = '<!--220613--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON-ARCHIVE-LOG' | select-string -Pattern $Pattern_Archive -Quiet) {
        (Get-Content $checklist_named) -replace $V220519_Open,$V220519_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220520_Open,$V220520_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220521_Open,$V220521_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220522_Open,$V220522_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220526_Open,$V220526_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220530_Open,$V220530_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220545_Open,$V220545_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220559_Open,$V220559_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220561_Open,$V220561_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220571_Open,$V220571_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220572_Open,$V220572_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220573_Open,$V220573_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220574_Open,$V220574_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220578_Open,$V220578_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220582_Open,$V220582_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220597_Open,$V220597_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220611_Open,$V220611_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220613_Open,$V220613_NAF |
        Set-content $checklist_named

        write-host($V220519_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000090"
            RuleID = "V-220519"
            Status = "Open"
            CAT = "Cat II"
            Description = 'Archive Logging - Multiple rules: The Cisco switch must be configured to automatically audit account creation.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220519_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000090"
            RuleID = "V-220571"
            Status = "Open"
            CAT = "Cat II"
            Description = 'Archive Logging - Multiple rules: The Cisco switch must be configured to automatically audit account creation.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220519_Complete)
            }
        }


#V-220523: XE - Management on VTY
#V-220575: IOS - Management on VTY


        $Pattern_220523 = $hostname + '.+CISCO-L2-V-220523=Passed'
        $V220523_Complete = $hostname + ' ACL-Check check complete. Reference number: 00026'
        $V220523_Open = '<!--220523--><STATUS>Open</STATUS>'
        $V220575_Open = '<!--220575--><STATUS>Open</STATUS>'
        $V220523_NAF = '<!--220523--><STATUS>NotAFinding</STATUS>'
        $V220575_NAF = '<!--220575--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220523' | select-string -Pattern $Pattern_220523 -Quiet) {
        (Get-Content $checklist_named) -replace $V220523_Open,$V220523_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220575_Open,$V220575_NAF |
        Set-content $checklist_named

        write-host($V220523_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000140"
            RuleID = "V-220523"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to enforce approved authorizations for controlling the flow of management information within the device based on control policies.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220523_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000140"
            RuleID = "V-220575"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to enforce approved authorizations for controlling the flow of management information within the device based on control policies.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220523_Complete)
            }
        }


#V-220524: XE - Login Attempt Limit
#V-220576: IOS - Login Attempt Limit


        $Pattern_220524 = $hostname + '.+CISCO-L2-V-220524=Passed'
        $V220524_Complete = $hostname + ' Login logging check complete. Reference number: 00027'
        $V220524_Open = '<!--220524--><STATUS>Open</STATUS>'
        $V220576_Open = '<!--220576--><STATUS>Open</STATUS>'
        $V220524_NAF = '<!--220524--><STATUS>NotAFinding</STATUS>'
        $V220576_NAF = '<!--220576--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220524' | select-string -Pattern $Pattern_220524 -Quiet) {
        (Get-Content $checklist_named) -replace $V220524_Open,$V220524_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220576_Open,$V220576_NAF |
        Set-content $checklist_named

        write-host($V220524_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000150"
            RuleID = "V-220524"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to enforce the limit of three consecutive invalid logon attempts, after which time it must lock out the user account from accessing the device for 15 minutes.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220524_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000150"
            RuleID = "V-220576"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to enforce the limit of three consecutive invalid logon attempts, after which time it must lock out the user account from accessing the device for 15 minutes.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220524_Complete)
            }
        }


#V-220525: XE - Banner
#V-220577: IOS - Banner


        $Pattern_220525 = $hostname + '.+CISCO-L2-V-220525=Passed'
        $V220525_Complete = $hostname + ' Banner check complete. Reference number: 00028'
        $V220525_Open = '<!--220525--><STATUS>Open</STATUS>'
        $V220577_Open = '<!--220577--><STATUS>Open</STATUS>'
        $V220525_NAF = '<!--220525--><STATUS>NotAFinding</STATUS>'
        $V220577_NAF = '<!--220577--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220525' | select-string -Pattern $Pattern_220525 -Quiet) {
        (Get-Content $checklist_named) -replace $V220525_Open,$V220525_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220577_Open,$V220577_NAF |
        Set-content $checklist_named

        write-host($V220525_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000160"
            RuleID = "V-220525"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to display the Standard Mandatory DoD Notice and Consent Banner before granting access to the device.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220525_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000160"
            RuleID = "V-220577"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to display the Standard Mandatory DoD Notice and Consent Banner before granting access to the device.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220525_Complete)
            }
        }



#V-220528: XE - Service timestamp (Includes 220528, 220551, 220550)
#V-220580: IOS - Service timestamp (Includes 220580, 220602, 220603)


        $Pattern_220528 = $hostname + '.+CISCO-L2-V-220528=Passed'
        $V220528_Complete = $hostname + ' Service Timestamp check complete. Reference number: 00029'
        $V220528_Open = '<!--220528--><STATUS>Open</STATUS>'
        $V220550_Open = '<!--220550--><STATUS>Open</STATUS>'
        $V220551_Open = '<!--220551--><STATUS>Open</STATUS>'
        $V220580_Open = '<!--220580--><STATUS>Open</STATUS>'
        $V220528_NAF = '<!--220528--><STATUS>NotAFinding</STATUS>'
        $V220550_NAF = '<!--220550--><STATUS>NotAFinding</STATUS>'
        $V220551_NAF = '<!--220551--><STATUS>NotAFinding</STATUS>'
        $V220580_NAF = '<!--220580--><STATUS>NotAFinding</STATUS>'


    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220528' | select-string -Pattern $Pattern_220528 -Quiet) {
        (Get-Content $checklist_named) -replace $V220528_Open,$V220528_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220550_Open,$V220550_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220551_Open,$V220551_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220580_Open,$V220580_NAF |
        Set-content $checklist_named

        write-host($V220528_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000280"
            RuleID = "V-220528"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must produce audit records containing information to establish when (date and time) the events occurred.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220528_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000280"
            RuleID = "V-220580"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must produce audit records containing information to establish when (date and time) the events occurred.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220528_Complete)
            }
        }


#V-220529: XE - Log-input
#V-220581: IOS - Log-input


        $Pattern_220529 = $hostname + '.+CISCO-L2-V-220529=Passed'
        $V220529_Complete = $hostname + ' Log-input check complete. Reference number: 00030'
        $V220529_Open = '<!--220529--><STATUS>Open</STATUS>'
        $V220581_Open = '<!--220581--><STATUS>Open</STATUS>'
        $V220529_NAF = '<!--220529--><STATUS>NotAFinding</STATUS>'
        $V220581_NAF = '<!--220581--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220529' | select-string -Pattern $Pattern_220529 -Quiet) {
        (Get-Content $checklist_named) -replace $V220529_Open,$V220529_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220581_Open,$V220581_NAF |
        Set-content $checklist_named

        write-host($V220529_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000290"
            RuleID = "V-220529"
            Status = "Open"
            CAT = "Cat II"
            Description = 'Log-Input: The Cisco switch must produce audit records containing information to establish where the events occurred.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220529_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000290"
            RuleID = "V-220581"
            Status = "Open"
            CAT = "Cat II"
            Description = 'Log-Input: The Cisco switch must produce audit records containing information to establish where the events occurred.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220529_Complete)
            }
        }



#V-220531: XE - File Permissions (Includes 220531, 220532, 220533)
#V-220583: IOS - File Permissions (Includes 220583, 220584, 220585)


        $Pattern_220531 = $hostname + '.+CISCO-L2-V-220531=Passed'
        $V220531_Complete = $hostname + ' File permission check complete. Reference number: 00031'
        $V220531_Open = '<!--220531--><STATUS>Open</STATUS>'
        $V220532_Open = '<!--220532--><STATUS>Open</STATUS>'
        $V220533_Open = '<!--220533--><STATUS>Open</STATUS>'
        $V220583_Open = '<!--220583--><STATUS>Open</STATUS>'
        $V220584_Open = '<!--220584--><STATUS>Open</STATUS>'
        $V220585_Open = '<!--220585--><STATUS>Open</STATUS>'
        $V220531_NAF = '<!--220531--><STATUS>NotAFinding</STATUS>'
        $V220532_NAF = '<!--220532--><STATUS>NotAFinding</STATUS>'
        $V220533_NAF = '<!--220533--><STATUS>NotAFinding</STATUS>'
        $V220583_NAF = '<!--220583--><STATUS>NotAFinding</STATUS>'
        $V220584_NAF = '<!--220584--><STATUS>NotAFinding</STATUS>'
        $V220585_NAF = '<!--220585--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220531' | select-string -Pattern $Pattern_220531 -Quiet) {
        (Get-Content $checklist_named) -replace $V220531_Open,$V220531_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220532_Open,$V220532_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220533_Open,$V220533_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220583_Open,$V220583_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220584_Open,$V220584_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220585_Open,$V220585_NAF |
        Set-content $checklist_named

        write-host($V220531_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000380"
            RuleID = "V-220531"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to protect audit information from unauthorized modification.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220531_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000380"
            RuleID = "V-220583"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to protect audit information from unauthorized modification.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220531_Complete)
            }
        }


#V-220534: XE - Unused Services
#V-220586: IOS - Unused Services 


        $Pattern_220534 = $hostname + '.+CISCO-L2-V-220534=Passed'
        $V220534_Complete = $hostname + ' Unused service check complete. Reference number: 00032'
        $V220534_Open = '<!--220534--><STATUS>Open</STATUS>'
        $V220586_Open = '<!--220586--><STATUS>Open</STATUS>'
        $V220534_NAF = '<!--220534--><STATUS>NotAFinding</STATUS>'
        $V220586_NAF = '<!--220586--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220534' | select-string -Pattern $Pattern_220534 -Quiet) {
        (Get-Content $checklist_named) -replace $V220534_Open,$V220534_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220586_Open,$V220586_NAF |
        Set-content $checklist_named

        write-host($V220534_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000470"
            RuleID = "V-220534"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to prohibit the use of all unnecessary and nonsecure functions and services.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220534_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000470"
            RuleID = "V-220586"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to prohibit the use of all unnecessary and nonsecure functions and services.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220534_Complete)
            }
        }


#V-220535: XE - One Admin Account
#V-220587: IOS - One Admin Account


        $Pattern_220535 = $hostname + '.+CISCO-L2-V-220535=Passed'
        $V220535_Complete = $hostname + ' Admin account check complete. Reference number: 00033'
        $V220535_Open = '<!--220535--><STATUS>Open</STATUS>'
        $V220587_Open = '<!--220587--><STATUS>Open</STATUS>'
        $V220535_NAF = '<!--220535--><STATUS>NotAFinding</STATUS>'
        $V220587_NAF = '<!--220587--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220535' | select-string -Pattern $Pattern_220535 -Quiet) {
        (Get-Content $checklist_named) -replace $V220535_Open,$V220535_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220587_Open,$V220587_NAF |
        Set-content $checklist_named

        write-host($V220535_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000490"
            RuleID = "V-220535"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured with only one local account to be used as the account of last resort in the event the authentication server is unavailable.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220535_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000490"
            RuleID = "V-220587"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured with only one local account to be used as the account of last resort in the event the authentication server is unavailable.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220535_Complete)
            }
        }

#V-220537: XE - AAA Password Criteria - Minimum Length
#V-220589: IOS - AAA Password Criteria - Minimum Length


        $Pattern_220537 = $hostname + '.+CISCO-L2-V-220537=Passed'
        $V220537_Complete = $hostname + ' AAA Password Min-Length check complete. Reference number: 00034'
        $V220537_Open = '<!--220537--><STATUS>Open</STATUS>'
        $V220589_Open = '<!--220589--><STATUS>Open</STATUS>'
        $V220537_NAF = '<!--220537--><STATUS>NotAFinding</STATUS>'
        $V220589_NAF = '<!--220589--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220537' | select-string -Pattern $Pattern_220537 -Quiet) {
        (Get-Content $checklist_named) -replace $V220537_Open,$V220537_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220589_Open,$V220589_NAF |
        Set-content $checklist_named

        write-host($V220537_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000550"
            RuleID = "V-220537"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce a minimum 15-character password length.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220537_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000550"
            RuleID = "V-220589"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce a minimum 15-character password length.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220537_Complete)
            }
        }


#V-220538: XE - AAA Password Criteria - Upper Case
#V-220590: IOS - AAA Password Criteria - Upper Case


        $Pattern_220538 = $hostname + '.+CISCO-L2-V-220538=Passed'
        $V220538_Complete = $hostname + ' AAA Password Upper-Case check complete. Reference number: 00035'
        $V220538_Open = '<!--220538--><STATUS>Open</STATUS>'
        $V220590_Open = '<!--220590--><STATUS>Open</STATUS>'
        $V220538_NAF = '<!--220538--><STATUS>NotAFinding</STATUS>'
        $V220590_NAF = '<!--220590--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220538' | select-string -Pattern $Pattern_220538 -Quiet) {
        (Get-Content $checklist_named) -replace $V220538_Open,$V220538_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220590_Open,$V220590_NAF |
        Set-content $checklist_named

        write-host($V220538_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000570"
            RuleID = "V-220538"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one upper-case character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220538_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000570"
            RuleID = "V-220590"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one upper-case character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220538_Complete)
            }
        }


#V-220539: XE - AAA Password Criteria - Lower Case
#V-220591: IOS - AAA Password Criteria - Lower Case


        $Pattern_220539 = $hostname + '.+CISCO-L2-V-220539=Passed'
        $V220539_Complete = $hostname + ' AAA Password Lower-Case check complete. Reference number: 00036'
        $V220539_Open = '<!--220539--><STATUS>Open</STATUS>'
        $V220591_Open = '<!--220591--><STATUS>Open</STATUS>'
        $V220539_NAF = '<!--220539--><STATUS>NotAFinding</STATUS>'
        $V220591_NAF = '<!--220591--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220539' | select-string -Pattern $Pattern_220539 -Quiet) {
        (Get-Content $checklist_named) -replace $V220539_Open,$V220539_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220591_Open,$V220591_NAF |
        Set-content $checklist_named

        write-host($V220539_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000580"
            RuleID = "V-220539"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one lower-case character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220539_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000580"
            RuleID = "V-220591"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one lower-case character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220539_Complete)
            }
        }


#V-220540: XE - AAA Password Criteria - Numeric Count
#V-220592: IOS - AAA Password Criteria - Numeric Count


        $Pattern_220540 = $hostname + '.+CISCO-L2-V-220540=Passed'
        $V220540_Complete = $hostname + ' AAA Password Numeric check complete. Reference number: 00037'
        $V220540_Open = '<!--220540--><STATUS>Open</STATUS>'
        $V220592_Open = '<!--220592--><STATUS>Open</STATUS>'
        $V220540_NAF = '<!--220540--><STATUS>NotAFinding</STATUS>'
        $V220592_NAF = '<!--220592--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220540' | select-string -Pattern $Pattern_220540 -Quiet) {
        (Get-Content $checklist_named) -replace $V220540_Open,$V220540_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220592_Open,$V220592_NAF |
        Set-content $checklist_named

        write-host($V220540_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000590"
            RuleID = "V-220540"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one numeric character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220540_Complete)
        } else {
        $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000590"
            RuleID = "V-220592"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one numeric character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220540_Complete)
            }
        }


#V-220541: XE - AAA Password Criteria - Special-Case
#V-220593: IOS - AAA Password Criteria - Special-Case


        $Pattern_220541 = $hostname + '.+CISCO-L2-V-220541=Passed'
        $V220541_Complete = $hostname + ' AAA Password Special-Case check complete. Reference number: 00038'
        $V220541_Open = '<!--220541--><STATUS>Open</STATUS>'
        $V220593_Open = '<!--220593--><STATUS>Open</STATUS>'
        $V220541_NAF = '<!--220541--><STATUS>NotAFinding</STATUS>'
        $V220593_NAF = '<!--220593--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220541' | select-string -Pattern $Pattern_220541 -Quiet) {
        (Get-Content $checklist_named) -replace $V220541_Open,$V220541_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220593_Open,$V220593_NAF |
        Set-content $checklist_named

        write-host($V220541_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000600"
            RuleID = "V-220541"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one special character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220541_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000600"
            RuleID = "V-220593"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to enforce password complexity by requiring that at least one special character be used.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220541_Complete)
            }
        }


#V-220542: XE - AAA Password Criteria - Character Change
#V-220594: IOS - AAA Password Criteria - Character Change


        $Pattern_220542 = $hostname + '.+CISCO-L2-V-220542=Passed'
        $V220542_Complete = $hostname + ' AAA Password Char-Change check complete. Reference number: 00039'
        $V220542_Open = '<!--220542--><STATUS>Open</STATUS>'
        $V220594_Open = '<!--220594--><STATUS>Open</STATUS>'
        $V220542_NAF = '<!--220542--><STATUS>NotAFinding</STATUS>'
        $V220594_NAF = '<!--220594--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220542' | select-string -Pattern $Pattern_220542 -Quiet) {
        (Get-Content $checklist_named) -replace $V220542_Open,$V220542_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220594_Open,$V220594_NAF |
        Set-content $checklist_named

        write-host($V220542_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000610"
            RuleID = "V-220542"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to require that when a password is changed, the characters are changed in at least eight of the positions within the password.
'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220542_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000610"
            RuleID = "V-220594"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must be configured to require that when a password is changed, the characters are changed in at least eight of the positions within the password.
'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220542_Complete)
            }
        }


#V-220543: XE - Service password-encryption
#V-220595: IOS - Service password-encryption


        $Pattern_220543 = $hostname + '.+CISCO-L2-V-220543=Passed'
        $V220543_Complete = $hostname + ' Service Password-encryption check complete. Reference number: 00040'
        $V220543_Open = '<!--220543--><STATUS>Open</STATUS>'
        $V220595_Open = '<!--220595--><STATUS>Open</STATUS>'
        $V220543_NAF = '<!--220543--><STATUS>NotAFinding</STATUS>'
        $V220595_NAF = '<!--220595--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220543' | select-string -Pattern $Pattern_220543 -Quiet) {
        (Get-Content $checklist_named) -replace $V220543_Open,$V220543_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220595_Open,$V220595_NAF |
        Set-content $checklist_named

        write-host($V220543_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000620"
            RuleID = "V-220543"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must only store cryptographic representations of passwords.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220543_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000620"
            RuleID = "V-220595"
            Status = "Open"
            CAT = "Cat II"
            Description = 'AAA Policy: The Cisco switch must only store cryptographic representations of passwords.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220543_Complete)
            }
        }


#V-220544: XE - Exec-Timeout (CON)
#V-220596: IOS - Exec-Timeout (CON)


        $Pattern_220544_1 = $hostname + '.+CISCO-L2-V-220544-1=Passed'
        $V220544_Complete = $hostname + ' Exec-timeout check complete (Console). Reference number: 00041-1'
        $V220544_Open = '<!--220544--><STATUS>Open</STATUS>'
        $V220596_Open = '<!--220596--><STATUS>Open</STATUS>'
        $V220544_NAF = '<!--220544--><STATUS>NotAFinding</STATUS>'
        $V220596_NAF = '<!--220596--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220544-1' | select-string -Pattern $Pattern_220544_1 -Quiet) {
        (Get-Content $checklist_named) -replace $V220544_Open,$V220544_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220596_Open,$V220596_NAF |
        Set-content $checklist_named

        write-host($V220544_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000720"
            RuleID = "V-220544"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to terminate all network connections associated with device management after 10 minutes of inactivity.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220544_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000720"
            RuleID = "V-220596"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to terminate all network connections associated with device management after 10 minutes of inactivity.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220544_Complete)
            }
        }

#V-220544-2: XE - Exec-Timeout (VTY)
#V-220596-2: IOS - Exec-Timeout (VTY)


        $Pattern_220544_2 = $hostname + '.+CISCO-L2-V-220544-2=Passed'
        $V220544_Complete = $hostname + ' Exec-timeout check complete (VTY). Reference number: 00041-2'
        $V220544_Open = '<!--220544--><STATUS>Open</STATUS>'
        $V220596_Open = '<!--220596--><STATUS>Open</STATUS>'
        $V220544_NAF = '<!--220544--><STATUS>NotAFinding</STATUS>'
        $V220596_NAF = '<!--220596--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220544-2' | select-string -Pattern $Pattern_220544_2 -Quiet) {
        (Get-Content $checklist_named) -replace $V220544_Open,$V220544_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220596_Open,$V220596_NAF |
        Set-content $checklist_named

        write-host($V220544_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000720"
            RuleID = "V-220544"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to terminate all network connections associated with device management after 5 minutes of inactivity.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220544_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000720"
            RuleID = "V-220596"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to terminate all network connections associated with device management after 5 minutes of inactivity.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220544_Complete)
            }
        }


#V-220547: XE - Logging Buffered
#V-220599: IOS - Logging Buffered


        $Pattern_220547 = $hostname + '.+CISCO-L2-V-220547=Passed'
        $V220547_Complete = $hostname + ' Logging-Buffered check complete. Reference number: 00042'
        $V220547_Open = '<!--220547--><STATUS>Open</STATUS>'
        $V220599_Open = '<!--220599--><STATUS>Open</STATUS>'
        $V220547_NAF = '<!--220547--><STATUS>NotAFinding</STATUS>'
        $V220599_NAF = '<!--220599--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220547' | select-string -Pattern $Pattern_220547 -Quiet) {
        (Get-Content $checklist_named) -replace $V220547_Open,$V220547_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220599_Open,$V220599_NAF |
        Set-content $checklist_named

        write-host($V220547_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000980"
            RuleID = "V-220547"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to allocate audit record storage capacity in accordance with organization-defined audit record storage requirements.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220547_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-000980"
            RuleID = "V-220599"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to allocate audit record storage capacity in accordance with organization-defined audit record storage requirements.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220547_Complete)
            }
        }


#V-220548: XE - Logging Trap Informational
#V-22060: IOS - Logging Trap Informational


        $Pattern_220548 = $hostname + '.+CISCO-L2-V-220548=Passed'
        $V220548_Complete = $hostname + ' Logging trap informational check complete. Reference number: 00043'
        $V220548_Open = '<!--220548--><STATUS>Open</STATUS>'
        $V220600_Open = '<!--220600--><STATUS>Open</STATUS>'
        $V220548_NAF = '<!--220548--><STATUS>NotAFinding</STATUS>'
        $V220600_NAF = '<!--220600--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220548' | select-string -Pattern $Pattern_220548 -Quiet) {
        (Get-Content $checklist_named) -replace $V220548_Open,$V220548_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220600_Open,$V220600_NAF |
        Set-content $checklist_named

        write-host($V220548_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001000"
            RuleID = "V-220548"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to generate an alert for all audit failure events.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220548_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001000"
            RuleID = "V-220600"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to generate an alert for all audit failure events.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220548_Complete)
            }
        }


#V-220549: XE - NTP Server
#V-220601: IOS - NTP Server


        $Pattern_220549 = $hostname + '.+CISCO-L2-V-220549=Passed'
        $V220549_Complete = $hostname + ' NTP Server check complete. Reference number: 00044'
        $V220549_Open = '<!--220549--><STATUS>Open</STATUS>'
        $V220601_Open = '<!--220601--><STATUS>Open</STATUS>'
        $V220549_NAF = '<!--220549--><STATUS>NotAFinding</STATUS>'
        $V220601_NAF = '<!--220601--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220549' | select-string -Pattern $Pattern_220549 -Quiet) {
        (Get-Content $checklist_named) -replace $V220549_Open,$V220549_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220601_Open,$V220601_NAF |
        Set-content $checklist_named

        write-host($V220549_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001030"
            RuleID = "V-220549"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to synchronize its clock with the primary and secondary time sources using redundant authoritative time sources.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220549_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001030"
            RuleID = "V-220601"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to synchronize its clock with the primary and secondary time sources using redundant authoritative time sources.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220549_Complete)
            }
        }


#V-220552: XE - SNMP MAC Check (No MD5)
#V-220604: IOS - SNMP MAC Check (No MD5)


        $Pattern_220552 = $hostname + '.+CISCO-L2-V-220552=Warning'
        $Pattern_220552_2 = $hostname + '.+CISCO-L2-V-220552-2=Warning'
        $V220552_Complete = $hostname + ' SNMP MAC check complete. Reference number: 00045'
        $V220552_Open = '<!--220552--><STATUS>Open</STATUS>'
        $V220604_Open = '<!--220604--><STATUS>Open</STATUS>'
        $V220552_NAF = '<!--220552--><STATUS>NotAFinding</STATUS>'
        $V220604_NAF = '<!--220604--><STATUS>NotAFinding</STATUS>'


    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220552' | select-string -Pattern $Pattern_220552 -Quiet) {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001130"
            RuleID = "V-220552"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate SNMP messages using a FIPS-validated Keyed-Hash Message Authentication Code (HMAC).'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220552_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001130"
            RuleID = "V-220604"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate SNMP messages using a FIPS-validated Keyed-Hash Message Authentication Code (HMAC).'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220552_Complete)
            }
        } elseif(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220552-2' | select-string -Pattern $Pattern_220552-2 -Quiet) {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            Ipaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001130"
            RuleID = "V-220552"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate SNMP messages using a FIPS-validated Keyed-Hash Message Authentication Code (HMAC).'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220552_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            Ipaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001130"
            RuleID = "V-220604"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate SNMP messages using a FIPS-validated Keyed-Hash Message Authentication Code (HMAC).'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220552_Complete)
            }
        } else {
        (Get-Content $checklist_named) -replace $V220552_Open,$V220552_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220604_Open,$V220604_NAF |
        Set-content $checklist_named

        write-host($V220552_Complete)
        }

#V-220553: XE - SNMP Encryption Check
#V-220605: IOS - SNMP Encryption Check


        $Pattern_220553 = $hostname + '.+CISCO-L2-V-220553-1=Passed'
        $V220553_Complete = $hostname + ' SNMP Encryption Check Complete. Reference number: 00046'
        $V220553_Open = '<!--220553--><STATUS>Open</STATUS>'
        $V220605_Open = '<!--220605--><STATUS>Open</STATUS>'
        $V220553_NAF = '<!--220553--><STATUS>NotAFinding</STATUS>'
        $V220605_NAF = '<!--220605--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220553-1' | select-string -Pattern $Pattern_220553 -Quiet) {
        (Get-Content $checklist_named) -replace $V220553_Open,$V220553_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220605_Open,$V220605_NAF |
        Set-content $checklist_named

        write-host($V220553_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001140"
            RuleID = "V-220553"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to encrypt SNMP messages using a FIPS 140-2 approved algorithm.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220553_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001140"
            RuleID = "V-220605"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to encrypt SNMP messages using a FIPS 140-2 approved algorithm.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220553_Complete)
            }
        }

#V-220554: XE - NTP Authentication
#V-220606: IOS - NTP Authentication


        $Pattern_220554 = $hostname + '.+CISCO-L2-V-220554=Passed'
        $V220554_Complete = $hostname + ' NTP Authentication check complete. Reference number: 00047'
        $V220554_Open = '<!--220554--><STATUS>Open</STATUS>'
        $V220606_Open = '<!--220606--><STATUS>Open</STATUS>'
        $V220554_NAF = '<!--220554--><STATUS>NotAFinding</STATUS>'
        $V220606_NAF = '<!--220606--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220554' | select-string -Pattern $Pattern_220554 -Quiet) {
        (Get-Content $checklist_named) -replace $V220554_Open,$V220554_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220606_Open,$V220606_NAF |
        Set-content $checklist_named

        write-host($V220554_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001150"
            RuleID = "V-220554"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate Network Time Protocol (NTP) sources using authentication that is cryptographically based.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220554_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001150"
            RuleID = "V-220606"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to authenticate Network Time Protocol (NTP) sources using authentication that is cryptographically based.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220554_Complete)
            }
        }


#V-220555: XE - SSH HMAC
#V-220607: IOS - SSH HMAC


 	  $Pattern_220555 = $hostname + '.+CISCO-L2-V-220555=Passed'
        $V220555_Complete = $hostname + ' SSH HMAC check complete. Reference number: 00048'
        $V220555_Open = '<!--220555--><STATUS>Open</STATUS>'
        $V220607_Open = '<!--220607--><STATUS>Open</STATUS>'
        $V220555_NAF = '<!--220555--><STATUS>NotAFinding</STATUS>'
        $V220607_NAF = '<!--220607--><STATUS>NotAFinding</STATUS>'
   
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220555' | select-string -Pattern $Pattern_220555 -Quiet) {
        (Get-Content $checklist_named) -replace $V220555_Open,$V220555_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220607_Open,$V220607_NAF |
        Set-content $checklist_named

        write-host($V220555_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001200"
            RuleID = "V-220555"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to use FIPS-validated Keyed-Hash Message Authentication Code (HMAC) to protect the integrity of remote maintenance sessions.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
       write-host($V220555_Complete)
       } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001200"
            RuleID = "V-220607"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to use FIPS-validated Keyed-Hash Message Authentication Code (HMAC) to protect the integrity of remote maintenance sessions.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
       write-host($V220555_Complete)
            }
        }

#V-220556: XE - SSH Encryption Algorithm 
#V-220608: IOS - SSH Encryption Algorithm


 	  $Pattern_220556 = $hostname + '.+CISCO-L2-V-220556=Passed'
        $V220556_Complete = $hostname + ' SSH encryption algorithm check complete. Reference number: 00049'
        $V220556_Open = '<!--220556--><STATUS>Open</STATUS>'
        $V220608_Open = '<!--220608--><STATUS>Open</STATUS>'
        $V220556_NAF = '<!--220556--><STATUS>NotAFinding</STATUS>'
        $V220608_NAF = '<!--220608--><STATUS>NotAFinding</STATUS>'
    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220556' | select-string -Pattern $Pattern_220556 -Quiet) {
        (Get-Content $checklist_named) -replace $V220556_Open,$V220556_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220608_Open,$V220608_NAF |
        Set-content $checklist_named

        write-host($V220556_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001210"
            RuleID = "V-220556"
            Status = "Open"
            CAT = "Cat II"
            Description = 'SSH Encryption: The Cisco switch must be configured to implement replay-resistant authentication mechanisms for network access to privileged accounts.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220556_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001210"
            RuleID = "V-220608"
            Status = "Open"
            CAT = "Cat II"
            Description = 'SSH Encryption: The Cisco switch must be configured to implement replay-resistant authentication mechanisms for network access to privileged accounts.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220556_Complete)
            }
        }

#V-220557: XE - CoPP 
#V-220609: IOS - CoPP 


        $Pattern_220557 = $hostname + '.+CISCO-L2-V-220557=Passed'
        $V220557_Complete = $hostname + ' COPP check complete. Reference number: 00050'
        $V220557_Open = '<!--220557--><STATUS>Open</STATUS>'
        $V220609_Open = '<!--220609--><STATUS>Open</STATUS>'
        $V220557_NAF = '<!--220557--><STATUS>NotAFinding</STATUS>'
        $V220609_NAF = '<!--220609--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220557' | select-string -Pattern $Pattern_220557 -Quiet) {
        (Get-Content $checklist_named) -replace $V220557_Open,$V220557_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220609_Open,$V220609_NAF |
        Set-content $checklist_named

        write-host($V220557_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001220"
            RuleID = "V-220557"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to protect against known types of denial-of-service (DoS) attacks by employing organization-defined security safeguards.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220557_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001220"
            RuleID = "V-220609"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to protect against known types of denial-of-service (DoS) attacks by employing organization-defined security safeguards.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220557_Complete)
            }
        }

#V-220560: XE - Login Logging 
#V-220579: IOS - Login Logging


        $Pattern_220527 = $hostname + '.+CISCO-L2-V-220527=Passed'
        $V220527_Complete = $hostname + ' Login Logging Check Complete. Reference number: 00051'
        $V220560_Open = '<!--220560--><STATUS>Open</STATUS>'
        $V220612_Open = '<!--220612--><STATUS>Open</STATUS>'
        $V220560_NAF = '<!--220560--><STATUS>NotAFinding</STATUS>'
        $V220612_NAF = '<!--220612--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220527' | select-string -Pattern $Pattern_220527 -Quiet) {
        (Get-Content $checklist_named) -replace $V220560_Open,$V220560_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220612_Open,$V220612_NAF |
        Set-content $checklist_named

        Write-Host($V220527_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001260"
            RuleID = "V-220560"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to generate audit records when successful/unsuccessful attempts to log on with access privileges occur.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
         Write-Host($V220527_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001260"
            RuleID = "V-220612"
            Status = "Open"
            CAT = "Cat II"
            Description = 'The Cisco switch must be configured to generate audit records when successful/unsuccessful attempts to log on with access privileges occur.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
         Write-Host($V220527_Complete)
            }
        }


#V-220565: XE - TACACS Authentication
#V-220617: IOS - TACACS Authentication


        $Pattern_220565 = $hostname + '.+CISCO-L2-V-220565=Passed'
        $V220565_Complete = $hostname + ' TACACS check complete. Reference number: 00052'
        $V220565_Open = '<!--220565--><STATUS>Open</STATUS>'
        $V220617_Open = '<!--220617--><STATUS>Open</STATUS>'
        $V220565_NAF = '<!--220565--><STATUS>NotAFinding</STATUS>'
        $V220617_NAF = '<!--220617--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220565' | select-string -Pattern $Pattern_220565 -Quiet) {
        (Get-Content $checklist_named) -replace $V220565_Open,$V220565_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220617_Open,$V220617_NAF |
        Set-content $checklist_named

        write-host($V220565_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001370"
            RuleID = "V-220565"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to use an authentication server for the purpose of authenticating users prior to granting administrative access.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220565_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001370"
            RuleID = "V-220617"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to use an authentication server for the purpose of authenticating users prior to granting administrative access.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220565_Complete)
            }
        }

#V-220566: XE - KRON Write Memory Weekly
#V-220618: IOS - KRON Write Memory Weekly


        $Pattern_220566 = $hostname + '.+CISCO-L2-V-220566=Passed'
        $V220566_Complete = $hostname + ' KRON check complete. Reference number: 00053'
        $V220566_Open = '<!--220566--><STATUS>Open</STATUS>'
        $V220618_Open = '<!--220618--><STATUS>Open</STATUS>'
        $V220566_NAF = '<!--220566--><STATUS>NotAFinding</STATUS>'
        $V220618_NAF = '<!--220618--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220566' | select-string -Pattern $Pattern_220566 -Quiet) {
        (Get-Content $checklist_named) -replace $V220566_Open,$V220566_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220618_Open,$V220618_NAF |
        Set-content $checklist_named

        write-host($V220566_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001410"
            RuleID = "V-220566"
            Status = "Open"
            CAT = "Cat II"
            Description = 'KRON: The Cisco switch must be configured to support organizational requirements to conduct backups of the configuration when changes occur.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220566_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001410"
            RuleID = "V-220618"
            Status = "Open"
            CAT = "Cat II"
            Description = 'KRON: The Cisco switch must be configured to support organizational requirements to conduct backups of the configuration when changes occur.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220566_Complete)
            }
        }

#V-220568: XE - Logging traps/host
#V-220620: IOS - Logging trap/host


        $Pattern_220568 = $hostname + '.+CISCO-L2-V-220568=Passed'
        $V220568_Complete = $hostname + ' Logging check complete. Reference number: 00054'
        $V220568_Open = '<!--220568--><STATUS>Open</STATUS>'
        $V220568_NAF = '<!--220568--><STATUS>NotAFinding</STATUS>'
        $V220620_Open = '<!--220620--><STATUS>Open</STATUS>'
        $V220620_NAF = '<!--220620--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220568' | select-string -Pattern $Pattern_220568 -Quiet) {
        (Get-Content $checklist_named) -replace $V220568_Open,$V220568_NAF |
        Set-content $checklist_named


        (Get-Content $checklist_named) -replace $V220620_Open,$V220620_NAF |
        Set-content $checklist_named

        write-host($V220568_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001450"
            RuleID = "V-220568"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to send log data to a central log server for the purpose of forwarding alerts to the administrators and the ISSO.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220568_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001450"
            RuleID = "V-220620"
            Status = "Open"
            CAT = "Cat I"
            Description = 'The Cisco switch must be configured to send log data to a central log server for the purpose of forwarding alerts to the administrators and the ISSO.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220568_Complete)
            }
        }

#V-220569: XE - DISA Approved IOS Version !!!!!! show version output required !!!!!!!!!
#V-220621: IOS - IOS Version


 	  $Pattern_220569 = $hostname + '.+CISCO-L2-V-220569=Passed'
        $V220569_Complete = $hostname + ' software version verification complete. Reference number: 00055'
        $V220569_Open = '<!--220569--><STATUS>Open</STATUS>'
        $V220621_Open = '<!--220621--><STATUS>Open</STATUS>'
        $V220569_NAF = '<!--220569--><STATUS>NotAFinding</STATUS>'
        $V220621_NAF = '<!--220569--><STATUS>NotAFinding</STATUS>'
    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220569' | select-string -Pattern $Pattern_220569 -Quiet) {
        (Get-Content $checklist_named) -replace $V220569_Open,$V220569_NAF |
        Set-content $checklist_named

        (Get-Content $checklist_named) -replace $V220621_Open,$V220621_NAF |
        Set-content $checklist_named

        write-host($V220569_Complete)
        } else {
        if ((Get-Content $check_ver -Raw) -match $IOS_XE) {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001470"
            RuleID = "V-220569"
            Status = "Open"
            CAT = "Cat I"
            Description = 'Authorized Software Version: The Cisco switch must be running an IOS release that is currently supported by Cisco Systems.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220569_Complete)
        } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-ND-001470"
            RuleID = "V-220621"
            Status = "Open"
            CAT = "Cat I"
            Description = 'Authorized Software Version: The Cisco switch must be running an IOS release that is currently supported by Cisco Systems.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
        write-host($V220569_Complete)
            }
        }

#V-220650: XE - VTP Password          
#V-220624: IOS - VTP Password
		
		$Pattern_220650 = $hostname + '.+CISCO-L2-V-220650=Passed'
        $V220650_Complete = $hostname + ' VTP mode off check complete. Reference number: 00056'
        $V220650_Open = '<!--220650--><STATUS>Open</STATUS>'
        $V220650_NAF = '<!--220650--><STATUS>NotAFinding</STATUS>'
        $V220624_Open = '<!--220624--><STATUS>Open</STATUS>'
        $V220624_NAF = '<!--220624--><STATUS>NotAFinding</STATUS>'

    
    if(import-csv $report | Select-Object 'NodeName','CANNON CISCO-L2-V-220650' | select-string -Pattern $Pattern_220650 -Quiet) {
        (Get-Content $checklist_named) -replace $V220650_Open,$V220650_NAF |
        Set-content $checklist_named
		
       (Get-Content $checklist_named) -replace $V220624_Open,$V220624_NAF |
        Set-content $checklist_named

        write-host($V220650_Complete)
       
        } else {
        if((Get-Content $check_ver -Raw) -match $IOS_XE) {
           $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS-XE"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000030"
            RuleID = "V-220650"
            Status = "Open"
            CAT = "Cat II"
            Description = 'VTP password must be set or VTP mode must be set to off.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation
            } else {
            $logData = @(
            [pscustomobject]@{
            Name = $hostname
            IPaddr = $checklist_ip_post
            Type = "IOS"
	        Checklist = "Cisco L2 Switch"
            STIG = "CISC-L2-000030"
            RuleID = "V-220624"
            Status = "Open"
            CAT = "Cat II"
            Description = 'VTP password must be set or VTP mode must be set to off.'
                         }
                    )
            $logData | Export-Csv $env:userprofile\Desktop\STIG-FILES\STIG-OPEN\Open.csv -Append -NoTypeInformation

        write-host($V220650_Complete)
            }
        }

     }
